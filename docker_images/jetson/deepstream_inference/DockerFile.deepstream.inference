FROM nvcr.io/nvidia/deepstream-l4t:6.0.1-iot

LABEL maintainer "Mark"

ENV DEBIAN_FRONTEND=noninteractive
ENV PIP_ROOT_USER_ACTION=ignore

WORKDIR /workspace

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8

# install base dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        git \
		cmake \
		build-essential \
		curl \
		wget \ 
		gnupg2 \
		lsb-release \
    && rm -rf /var/lib/apt/lists/*

# Install python and python tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3 python3-pip python3-dev python3-numpy python3-tk python3-setuptools python3-gi python3-gst-1.0 && \
    rm -rf /var/lib/apt/lists/*
#RUN apt-get update && \
    #apt-get install -y libqt5svg5 && \
    #apt-get install -y python3-gi python3-dev python3-gst-1.0

# Update pip and install base python packages
RUN pip3 install --upgrade \
    pip setuptools wheel \
    && rm -rf /root/.cache/pip

# Install pip
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3-pip && \
    pip3 install --upgrade pip setuptools

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential cmake git unzip pkg-config zlib1g-dev \
    libjpeg-dev libjpeg8-dev libjpeg-turbo8-dev libpng-dev libtiff-dev \
    libavcodec-dev libavformat-dev libswscale-dev libglew-dev \
    libgtk2.0-dev libgtk-3-dev libcanberra-gtk* \
    #python-dev python-numpy python-pip \ 
    libxvidcore-dev libx264-dev libgtk-3-dev \
    libtbb2 libtbb-dev libdc1394-22-dev libxine2-dev \
    gstreamer1.0-tools libv4l-dev v4l-utils qv4l2 \
    libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev \
    libavresample-dev libvorbis-dev libxine2-dev libtesseract-dev \
    libfaac-dev libmp3lame-dev libtheora-dev libpostproc-dev \
    libopencore-amrnb-dev libopencore-amrwb-dev \
    libopenblas-dev libatlas-base-dev libblas-dev \
    liblapack-dev liblapacke-dev libeigen3-dev gfortran \
    libhdf5-dev protobuf-compiler \
    libprotobuf-dev libgoogle-glog-dev libgflags-dev \
    && rm -rf /var/lib/apt/lists/*

# Install OpenCV with CUDA support
ARG OPENCV_VERSION=4.6.0

WORKDIR /opt

COPY ./packages/opencv.zip ./packages/opencv_contrib.zip /opt/

RUN unzip opencv.zip && rm /opt/opencv.zip && \
    unzip opencv_contrib.zip && rm /opt/opencv_contrib.zip

# Install OpenCV from Source
RUN cd opencv-${OPENCV_VERSION} && \
    mkdir build && \
    cd build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib-${OPENCV_VERSION}/modules \
    -D EIGEN_INCLUDE_PATH=/usr/include/eigen3 \
    -D WITH_OPENCL=OFF \
    -D WITH_CUDA=ON \
    -D CUDA_ARCH_BIN=5.3 \
    -D CUDA_ARCH_PTX="" \
    -D WITH_CUDNN=ON \
    -D WITH_CUBLAS=ON \
    -D ENABLE_FAST_MATH=ON \
    -D CUDA_FAST_MATH=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D ENABLE_NEON=ON \
    -D WITH_QT=OFF \
    -D WITH_OPENMP=ON \
    -D BUILD_TIFF=ON \
    -D WITH_FFMPEG=ON \
    -D WITH_GSTREAMER=ON \
    -D WITH_TBB=ON \
    -D BUILD_TBB=ON \
    -D BUILD_TESTS=OFF \
    -D WITH_EIGEN=ON \
    -D WITH_V4L=ON \
    -D WITH_LIBV4L=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D INSTALL_C_EXAMPLES=OFF \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D PYTHON3_PACKAGES_PATH=/usr/lib/python3/dist-packages \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D BUILD_opencv_world=OFF \
    -D BUILD_EXAMPLES=OFF .. && \
    make && \
    make install && \
    #rm -r /usr/include/opencv4/opencv2 && \
    ldconfig && \
    make clean

#RUN ldconfig && \
#    make clean

# rm /opt/opencv-4.6.0 && rm /opt/opencv_contrib-4.6.0

#RUN rm -r /usr/include/opencv4/opencv2 && ldconfig && make clean && apt-get update
WORKDIR /workspace

COPY ./packages/pyds-1.1.0-py3-none-linux_aarch64.whl /workspace/pyds-1.1.0-py3-none-linux_aarch64.whl
RUN pip3 install pyds-1.1.0-py3-none-linux_aarch64.whl && rm /workspace/pyds-1.1.0-py3-none-linux_aarch64.whl

# --mount option requires BuildKit. Refer to https://docs.docker.com/go/buildkit/
#RUN --mount=type=bind,source=./packages/pyds-1.1.0-py3-none-linux_aarch64.whl,target=/workspace/pyds-1.1.0-py3-none-linux_aarch64.whl pip3 install wheel pyds-1.1.0-py3-none-linux_aarch64.whl


RUN apt-get update && apt-get install -y --no-install-recommends \ 
    libgstreamer1.0-0 gstreamer1.0-plugins-base gstreamer1.0-plugins-good \
    gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav \
    gstreamer1.0-doc gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa \
    gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio \
    libgstreamer-plugins-base1.0-dev libgstrtspserver-1.0-dev gstreamer1.0-rtsp

RUN apt-get update && apt-get install -y --no-install-recommends \ 
   libboost-all-dev

#libboost-all-dev
#libboost-thread-dev libboost-thread1.65-dev libboost-thread1.65.1 
#libboost-python1.65.1

RUN pip3 install numpy==1.19.4 pandas Jetson.GPIO paho-mqtt

# 
# PyCUDA
# https://medium.com/dropout-analytics/pycuda-on-jetson-nano-7990decab299

# due to python3.6
RUN pip3 install 'https://github.com/jetson-nano-wheels/python3.6-pycuda-2021.1/releases/download/v0.0.1/pycuda-2021.1-cp36-cp36m-linux_aarch64.whl'

# setup entrypoint
COPY ./packages/inference_entrypoint.sh /inference_entrypoint.sh
RUN chmod +x /inference_entrypoint.sh
ENTRYPOINT ["/inference_entrypoint.sh"]

#CMD ["bash"]

